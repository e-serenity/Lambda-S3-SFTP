service: sftp-lambda

variablesResolutionMode: 20210326

# This file is used for integration tests.
# It's designed to be used with offline serverless, S3 & SQS emulation
# to connect to a local dockerised ftp container for testing.
#
# See https://serverless.com/ for more info about the Serverless framework.

package:
  exclude:
    - "**"
  include:
    - handlers/**
    - node_modules/**
    - "!node_modules/aws-sdk/**" # because Lambda environment already includes this

plugins:
  - serverless-pseudo-parameters
  - serverless-s3-local
  - serverless-offline-sqs
  - serverless-offline
provider:
  name: aws
  runtime: nodejs14.x
  region: ${opt:region, "eu-central-1"}
  timeout: 20
  reservedConcurrency: 1
  stage: ${opt:stage}
  stackTags:
    project: sftp-lambda
  environment:
    # The environment variables apply to all functions.
    STAGE: ${self:provider.stage}
    SFTP_HOST: ${self:custom.${self:provider.stage}.ftp.connection.host}
    SFTP_PORT: ${self:custom.${self:provider.stage}.ftp.connection.port}
    SFTP_USER: ${self:custom.${self:provider.stage}.ftp.connection.user}
    SFTP_PRIVATE_KEY: ${self:custom.${self:provider.stage}.ftp.connection.sshPrivateKey, null}
    SFTP_SSH_READY_TIMEOUT_SECONDS: 5
    SFTP_PUSH_TIMEOUT_SECONDS: 10
    SFTP_PASSWORD: ${self:custom.${self:provider.stage}.ftp.connection.sshPassword, null}
    SFTP_RETRY_QUEUE_NAME: ${self:custom.${self:provider.stage}.push_files.retry_queue}
    SFTP_SOURCE_S3_REGEXP_STRIP: ^${self:custom.${self:provider.stage}.push_files.s3_prefix}
    SFTP_TARGET_DIR: ${self:custom.${self:provider.stage}.push_files.ftp_target_dir}
    SNS_TOPIC_ARN: ${self:custom.${self:provider.stage}.notifications.sns}
  iam:
    role:
      statements:
        # Allow functions to create a network interface if need to assign to a VPC
        - Effect: Allow
          Action:
            - "ec2:CreateNetworkInterface"
            - "ec2:DescribeNetworkInterfaces"
            - "ec2:DeleteNetworkInterface"
          Resource: "*"
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - "s3:GetObject"
            - "s3:DeleteObjectTagging"
            - "s3:GetObjectVersionTagging"
            - "s3:ListBucketVersions"
            - "s3:PutObjectVersionTagging"
            - "s3:ListBucket"
            - "s3:DeleteObjectVersionTagging"
            - "s3:GetBucketAcl"
            - "s3:PutObject"
            - "s3:GetObjectAcl"
            - "s3:GetObject"
            - "s3:GetBucketCORS"
            - "s3:GetObjectVersionAcl"
            - "s3:PutObjectTagging"
            - "s3:DeleteObject"
            - "s3:PutObjectAcl"
            - "s3:GetObjectVersion"
          Resource:
            - "arn:aws:s3:::${self:custom.${self:provider.stage}.push_files.bucket}/${self:custom.${self:provider.stage}.push_files.s3_prefix}*"
            - "arn:aws:s3:::${self:custom.${self:provider.stage}.push_files.bucket}/*"
            - "arn:aws:s3:::${self:custom.${self:provider.stage}.push_files.bucket}"
        # Allow functions to read/write messages in SQS
        - Effect: Allow
          Action:
            - "sqs:DeleteMessage"
            - "sqs:GetQueueUrl"
            - "sqs:ChangeMessageVisibility"
            - "sqs:ReceiveMessage"
            - "sqs:SendMessage"
            - "sqs:GetQueueAttributes"
          Resource: "arn:aws:s3:::${self:custom.${self:provider.stage}.push_files.retry_queue}"
        # Allow functions to send messages to SNS topic
        - Effect: Allow
          Action:
            - "sqs:DeleteMessage"
            - "sqs:GetQueueUrl"
            - "sqs:ChangeMessageVisibility"
            - "sqs:ReceiveMessage"
            - "sqs:SendMessage"
            - "sqs:GetQueueAttributes"
          Resource: "arn:aws:sns:::${self:custom.${self:provider.stage}.notifications.sns}"

custom:
  s3: # local testing
    port: 8000
    directory: integration-test/tmp/s3-local # this directory must be already created.

  serverless-offline-sqs: # local testing
    endpoint: http://0.0.0.0:9324
    region: ${self:provider.region}
    accessKeyId: local
    secretAccessKey: local
    skipCacheInvalidation: false

  local:
    ftp:
      connection:
        host: localhost
        port: 2222
        user: demo
        #sshPrivateKey: ${file(integration-test/serverlessGetSSHTestKey.js):sshPrivateKey}
        sshPrivateKey: |
          -----BEGIN RSA PRIVATE KEY-----
          example-private-key
          -----END RSA PRIVATE KEY-----
    push_files:
      bucket: erp-test-toto
      s3_prefix: outbound/
      ftp_target_dir: ftp-share/inbound/
      retry_queue: erp-test-toto
    notifications:
      sns: arn:aws:sns:eu-central-1:272969123456:SNSTopicEmail-1PLFAQAM2VHX0
    # Define the following connection structure for testing:
    #
    # {bucket}:
    #   outbound/
    #   inbound/
    # {ftp}:
    #   ftp-share/
    #     outbound/
    #     inbound/
    #
    # pull_files not used
    # pull_files:
    #   target_s3_prefix: inbound/
    #   ftp_source_dir: ftp-share/outbound/

  toto:
    ftp:
      connection:
        host: my-sftp-host
        port: 22
        user: loic
        #sshPrivateKey: ${file(integration-test/serverlessGetSSHTestKey.js):sshPrivateKey}
        sshPrivateKey: |
          -----BEGIN RSA PRIVATE KEY-----
          example-private-key
          -----END RSA PRIVATE KEY-----
    push_files:
      bucket: erp-test-toto
      s3_prefix: toto/
      ftp_target_dir: /erp-test-toto/sftp/
      retry_queue: erp-test-toto
    notifications:
      sns: arn:aws:sns:eu-central-1:272969123456:SNSTopicEmail-1PLFAQAM2VHX0

  titi:
    ftp:
      connection:
        host: my-sftp-host
        port: 22
        user: user2
        sshPassword: password
    push_files:
      bucket: erp-test-titi
      s3_prefix: titi/
      ftp_target_dir: /
      retry_queue: erp-test-toto
    notifications:
      sns: arn:aws:sns:eu-central-1:272969123456:SNSTopicEmail-1PLFAQAM2VHX0

functions:
  # Pull files function disable
  # pullFiles:
  #   handler: handlers/pull.pull
  #   environment:
  #     SFTP_SOURCE_DIR: ${self:custom.${self:provider.stage}.pull_files.ftp_source_dir}
  #     SFTP_FILE_RETENTION_DAYS: 0
  #     SFTP_TARGET_S3_BUCKET: ${self:custom.${self:provider.stage}.ftp.bucket}
  #     SFTP_TARGET_S3_PREFIX: ${self:custom.${self:provider.stage}.pull_files.target_s3_prefix}
  #   alarms:
  #     - functionErrors
  pushFiles:
    handler: handlers/push.push
    events:
      - s3:
          bucket: ${self:custom.${self:provider.stage}.push_files.bucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: ${self:custom.${self:provider.stage}.push_files.s3_prefix}
          existing: true
    alarms:
      - functionErrors

  pushFilesRetry:
    handler: handlers/pushRetry.pushRetry
    alarms:
      - functionErrors
